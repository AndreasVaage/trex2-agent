#include "TREX.nddl"
#include "auv/navigator.nddl"
#include "auv/platform.nddl"

class SurveyParams extends AgentTimeline {

	predicate Boot {}
	
	predicate Params {
		float speed;
		float min_depth, max_depth;
		float pitch_angle;
	}   
	 
    SurveyParams(Mode _mode) {
		super(_mode, "Boot");
    }
}

class YoYoController extends AgentTimeline {
	
	YoYoController(Mode _mode) {
		super(_mode, "Idle");
	}	
	
	predicate Idle {}
	
	action Done {
		float latitude, longitude, max_z, min_z, speed;
	}
	
	predicate Exec {
		float latitude, longitude, max_z, min_z, speed;
	}
}

class NavActions {
    int time_at_surface;
    
    action DoGoing {
	float orig_lat, orig_lon, orig_z;
	float dist;
    }
    
    NavActions(int _time_at_surface) {
      super();
	  time_at_surface = _time_at_surface;
    }
 
}

NavActions::DoGoing {
    contained_by(ControlMode.TREX c);
    c.start < start;

    contained_by(OperationalLimits.Limits limits);
    ends(condition Navigator.Going go);
    go.start <= start;
 
	// Check operational limits
    if( go.z > 0.0 ) {
	go.z < limits.max_depth;
    } else {
	-1.0 * go.z < limits.max_altitude;
	-1.0 * go.z > limits.min_altitude; 
    }    
    
    meets(effect Navigator.At at);
    go.object == at.object;
    go.latitude == at.latitude;
    go.longitude == at.longitude;
    go.z == at.z;
    bool is_flat;
    is_flat == at.flat;
    go.flat == at.flat;
    
    go.speed == at.speed;

    if( false==is_flat ) {
      go.min_z == at.min_z;
      go.max_z == at.max_z;
    } else {
      go.min_z == go.object.flat_z;      
      go.max_z == go.object.flat_z;
    }
    

    int my_start;
    my_start >= c.start;

    if( c.start <= AGENT_CLOCK ) {
      int early_start;
      starts_during(Medium.Water surface);
      early_start == surface.start + object.time_at_surface;
      early_start <= start;
      my_start == max(c.start, early_start);
    }

    if( my_start <= AGENT_CLOCK ) {
	  contains(condition YoYoController.Exec cmd);
	  cmd.latitude == go.latitude;
	  cmd.longitude == go.longitude;
	  cmd.min_z == go.min_z;
	  cmd.max_z == go.max_z;
	  cmd.speed == go.speed;
	  concurrent(end, cmd.end);
    }
}

Navigator::Going {
    sane_pos(latitude, longitude, z);
    contained_by(ControlMode.TREX);
}

